{"version":3,"sources":["../src/OauthTwitter.js"],"names":["key","secret","consumerKey","consumerSecret","window","resolve","reject","options","forceLogin","force_login","authUrl","toString","oauth","deferredPromise","Promise","isResolved","value","error","getOAuthRequestToken","oauthToken","oauthTokenSecret","url","getAccessToken","width","height","loadURL","on","Error","webContents","event","indexOf","matched","match","getOAuthAccessToken","oauthAccessTokenSecret","oauthAccessTokenSecretSecret","oauth_access_token","oauth_access_token_secret","close"],"mappings":"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","file":"OauthTwitter.js","sourcesContent":["import assert from 'assert';\nimport { BrowserWindow } from 'electron';\nimport { OAuth } from 'oauth';\n\nexport default class {\n  constructor({ key, secret }) {\n    assert(key, 'OAuth Consumer Key is needed!');\n    assert(secret, 'OAuth Consumer secret is needed!');\n    this.consumerKey = key;\n    this.consumerSecret = secret;\n    this.window = null;\n    this.resolve = null;\n    this.reject = null;\n  }\n\n  startRequest(options = {}) {\n    const forceLogin = options.force_login || false;\n    const authUrl = `https://api.twitter.com/oauth/authenticate?force_login=${forceLogin.toString()};oauth_token=`;\n    const oauth = new OAuth(\n      'https://api.twitter.com/oauth/request_token',\n      'https://api.twitter.com/oauth/access_token',\n      this.consumerKey,\n      this.consumerSecret,\n      '1.0A',\n      null,\n      'HMAC-SHA1',\n    );\n\n    const deferredPromise = new Promise((resolve, reject) => {\n      let isResolved = false;\n      this.resolve = (value) => {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        resolve(value);\n      };\n\n      this.reject = (error) => {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        reject(error);\n      };\n    });\n\n    oauth.getOAuthRequestToken((error, oauthToken, oauthTokenSecret) => {\n      if (error) {\n        this.reject(error);\n        return;\n      }\n\n      const url = authUrl + oauthToken;\n      this.getAccessToken(oauth, oauthToken, oauthTokenSecret, url);\n    });\n    return deferredPromise;\n  }\n\n  getAccessToken(oauth, oauthToken, oauthTokenSecret, authUrl) {\n    this.window = new BrowserWindow({ width: 800, height: 600 });\n    this.window.loadURL(authUrl);\n    this.window.on('close', () => {\n      this.reject(\n        new Error('the window is closed before complete the authentication.'),\n      );\n    });\n    this.window.webContents.on('will-navigate', (event, url) => {\n      /**\n       * If 2fa is set, the url includes challenge_id, challenge_type\n       */\n      if (\n        url.indexOf('challenge_type') >= 0 &&\n        url.indexOf('challenge_id') >= 0\n      ) {\n        this.window.loadURL(url);\n      } else {\n        const matched = url.match(\n          /\\?oauth_token=([^&]*)&oauth_verifier=([^&]*)/,\n        );\n        if (matched) {\n          oauth.getOAuthAccessToken(\n            oauthToken,\n            oauthTokenSecret,\n            matched[2],\n            (error, oauthAccessTokenSecret, oauthAccessTokenSecretSecret) => {\n              if (error) {\n                this.reject(error);\n                return;\n              }\n\n              this.resolve({\n                oauth_access_token: oauthAccessTokenSecret,\n                oauth_access_token_secret: oauthAccessTokenSecretSecret,\n              });\n              this.window.close();\n            },\n          );\n        }\n      }\n    });\n  }\n}\n"]}